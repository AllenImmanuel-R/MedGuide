import { useState, useEffect, useRef } from "react";
import { Send, Bot, User, Loader2, MessageCircle, Moon, Sun, Plus, Home, MapPin } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import ReactMarkdown from "react-markdown";
import { useTheme } from "@/components/theme-provider";

import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/context/AuthContext";
import { useTranslation } from 'react-i18next';
import { aiAPI } from "@/services/api";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { useNavigate } from "react-router-dom";
import { clinicFinderService } from "@/services/clinicServices";
import type { Clinic } from "@/services/ClinicFinderService";

interface Message {
  id: string;
  role: "user" | "assistant";
  content: string;
  createdAt: string;
}

const Chat = () => {
  const { i18n } = useTranslation(['common', 'chat']);
  const { theme, setTheme } = useTheme();
  const navigate = useNavigate();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [conversationHistory, setConversationHistory] = useState<Array<{role: 'user' | 'assistant', content: string}>>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const { user } = useAuth();
  
  // Initialize Gemini AI as fallback
  const [geminiAI] = useState(() => {
    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    if (apiKey) {
      return new GoogleGenerativeAI(apiKey);
    }
    return null;
  });

  // Initialize welcome message
  useEffect(() => {
    const welcomeMessage: Message = {
      id: "1",
      role: "assistant",
      content: getWelcomeMessage(),
      createdAt: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
    };
    setMessages([welcomeMessage]);
    setConversationHistory([]); // Clear history when language changes
  }, [i18n.language]);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const getWelcomeMessage = () => {
    return i18n.language === 'en'
      ? "Hello! I'm MedGuide, your AI health assistant powered by Gemini. I can help you with medical questions, travel health advice, symptom analysis, and more. How can I help you today?"
      : "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роорпЖроЯрпНроХрпИроЯрпН, Gemini роЖро▓рпН роЗропроХрпНроХрокрпНрокроЯрпБроорпН роЙроЩрпНроХро│рпН AI роЪрпБроХро╛родро╛ро░ роЙродро╡ро┐ропро╛ро│ро░рпН. рооро░рпБродрпНродрпБро╡ роХрпЗро│рпНро╡ро┐роХро│рпН, рокропрог роЪрпБроХро╛родро╛ро░ роЖро▓рпЛроЪройрпИ, роЕро▒ро┐роХрпБро▒ро┐ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ рооро▒рпНро▒рпБроорпН рокро▓ро╡ро▒рпНро▒ро┐ро▓рпН роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН. роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?";
  };

  // Fallback Gemini AI function
  const getGeminiResponse = async (message: string): Promise<string> => {
    if (!geminiAI) {
      throw new Error('Gemini AI not initialized');
    }

    const model = geminiAI.getGenerativeModel({ model: "gemini-1.5-pro" });
    
    // Create health-focused prompt
    const healthPrompt = `You are MedGuide, a helpful AI health assistant. Please provide accurate, helpful health information while always reminding users to consult healthcare professionals for serious concerns. 

User message: ${message}

Please respond in ${i18n.language === 'en' ? 'English' : 'Tamil'} language. Keep your response informative but concise, and always include appropriate medical disclaimers.`;

    const result = await model.generateContent(healthPrompt);
    const response = result.response;
    return response.text();
  };

  const handleSendMessage = async (message?: string) => {
    const messageToSend = message || inputMessage.trim();
    if (!messageToSend || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: messageToSend,
      createdAt: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
    };

    setMessages((prev) => [...prev, userMessage]);
    
    // Add to conversation history
    const newUserHistory = { role: 'user' as const, content: messageToSend };
    setConversationHistory(prev => [...prev, newUserHistory]);
    
    setInputMessage('');
    setIsLoading(true);

    try {
      let responseContent = '';
      
      try {
        // First, try the backend API
        console.log('ЁЯФД Trying backend API...');
        const response = await aiAPI.chat(messageToSend, {
          conversationHistory,
          language: i18n.language,
          userId: user?.id || 'anonymous'
        });
        
        if (response.success && response.data) {
          responseContent = response.data.response;
          console.log('тЬЕ Backend API successful');
        } else {
          throw new Error(response.message || 'Backend API failed');
        }
      } catch (backendError) {
        console.log('тЪая╕П Backend API failed, trying direct Gemini...', backendError);
        
        // Fallback to direct Gemini API
        responseContent = await getGeminiResponse(messageToSend);
        console.log('тЬЕ Direct Gemini API successful');
        
        // Show a toast to inform user about fallback
        toast({
          title: i18n.language === 'en' ? 'Using Direct AI' : 'роирпЗро░роЯро┐ AI рокропройрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ',
          description: i18n.language === 'en' ? 'Connected directly to Gemini AI' : 'роирпЗро░роЯро┐ропро╛роХ Gemini AI роЙроЯройрпН роЗрогрпИроХрпНроХрокрпНрокроЯрпНроЯродрпБ',
        });
      }

      // Check if user is asking about clinics or has symptoms that need clinic suggestions
      const lowerMessage = messageToSend.toLowerCase();
      const clinicKeywords = ['clinic', 'hospital', 'doctor', 'medical', 'nearby', 'find', 'where', 'роХро┐ро│ро┐ройро┐роХрпН', 'рооро░рпБродрпНродрпБро╡рооройрпИ', 'рооро░рпБродрпНродрпБро╡ро░рпН', 'роЕро░рпБроХро┐ро▓рпН'];
      const symptomKeywords = ['pain', 'fever', 'headache', 'sick', 'hurt', 'ache', 'emergency', 'urgent', 'ро╡ро▓ро┐', 'роХро╛ропрпНроЪрпНроЪро▓рпН', 'родро▓рпИро╡ро▓ро┐', 'роирпЛропрпН', 'роЕро╡роЪро░роорпН'];
      
      const isAskingForClinics = clinicKeywords.some(keyword => lowerMessage.includes(keyword));
      const hasSymptoms = symptomKeywords.some(keyword => lowerMessage.includes(keyword));
      
      if (isAskingForClinics || hasSymptoms) {
        try {
          console.log('ЁЯПе Adding clinic suggestions...');
          const clinicSuggestions = await suggestNearbyClinics(messageToSend);
          responseContent += '\n\n' + clinicSuggestions;
        } catch (clinicError) {
          console.warn('тЪая╕П Failed to get clinic suggestions:', clinicError);
          // Don't fail the entire response, just add a note
          responseContent += '\n\n' + (i18n.language === 'en' 
            ? "ЁЯТб For nearby healthcare facilities, please enable location access or visit our Clinics page."
            : "ЁЯТб роЕро░рпБроХро┐ро▓рпБро│рпНро│ роЪрпБроХро╛родро╛ро░ ро╡роЪродро┐роХро│рпБроХрпНроХрпБ, роЗро░рпБрокрпНрокро┐роЯ роЕрогрпБроХро▓рпИ роЗропроХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роОроЩрпНроХро│рпН роХро┐ро│ро┐ройро┐роХрпНроХрпБроХро│рпН рокроХрпНроХродрпНродрпИрокрпН рокро╛ро░рпНро╡рпИропро┐роЯро╡рпБроорпН.");
        }
      }
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: responseContent,
        createdAt: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
      };
      
      setMessages((prev) => [...prev, assistantMessage]);
      
      // Add assistant response to conversation history
      const newBotHistory = { role: 'assistant' as const, content: responseContent };
      setConversationHistory(prev => [...prev, newUserHistory, newBotHistory]);
      
    } catch (error) {
      console.error('тЭМ All AI methods failed:', error);
      
      // Provide helpful response based on the user's message
      let helpfulResponse = '';
      const lowerMessage = messageToSend.toLowerCase();
      
      if (lowerMessage.includes('headache') || lowerMessage.includes('родро▓рпИро╡ро▓ро┐')) {
        helpfulResponse = i18n.language === 'en' 
          ? `I understand you're experiencing a headache. Here are some general suggestions:

тАв **Rest**: Try to rest in a quiet, dark room
тАв **Hydration**: Drink plenty of water as dehydration can cause headaches
тАв **Cold/Heat therapy**: Apply a cold compress to your forehead or a warm compress to your neck
тАв **Over-the-counter pain relief**: Consider acetaminophen or ibuprofen (follow package directions)
тАв **Stress management**: Practice deep breathing or gentle stretching

**тЪая╕П Seek immediate medical attention if you experience:**
- Sudden, severe headache unlike any you've had before
- Headache with fever, stiff neck, confusion, or vision changes
- Headache after a head injury
- Headache that worsens despite treatment

**Please consult a healthcare professional if headaches persist or worsen.**`
          : `роЙроЩрпНроХро│рпБроХрпНроХрпБ родро▓рпИро╡ро▓ро┐ роЗро░рпБрокрпНрокродрпИ роиро╛ройрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНроХро┐ро▒рпЗройрпН. роЗроЩрпНроХрпЗ роЪро┐ро▓ рокрпКродрпБро╡ро╛рой рокро░ро┐роирпНродрпБро░рпИроХро│рпН:

тАв **роУропрпНро╡рпБ**: роЕроорпИродро┐ропро╛рой, роЗро░рпБрогрпНроЯ роЕро▒рпИропро┐ро▓рпН роУропрпНро╡рпБ роОроЯрпБроХрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН
тАв **роирпАро░рпНроЪрпНроЪродрпНродрпБ**: роирпАро░ро┐ро┤рокрпНрокрпБ родро▓рпИро╡ро▓ро┐ропрпИ роПро▒рпНрокроЯрпБродрпНродрпБроорпН роОройрпНрокродро╛ро▓рпН роиро┐ро▒рпИроп родрогрпНрогрпАро░рпН роХрпБроЯро┐роХрпНроХро╡рпБроорпН
тАв **роХрпБро│ро┐ро░рпН/ро╡рпЖрокрпНрок роЪро┐роХро┐роЪрпНроЪрпИ**: роирпЖро▒рпНро▒ро┐ропро┐ро▓рпН роХрпБро│ро┐ро░рпН роТродрпНродроЯроорпН роЕро▓рпНро▓родрпБ роХро┤рпБродрпНродро┐ро▓рпН ро╡рпЖрокрпНрок роТродрпНродроЯроорпН ро╡рпИроХрпНроХро╡рпБроорпН
тАв **рооро░рпБроирпНродрпБ**: роЕроЪро┐роЯрпНроЯрооро┐ройрпЛроГрокрпЖройрпН роЕро▓рпНро▓родрпБ роЗрокрпНропрпВрокрпБро░рпВроГрокрпЖройрпН (рокрпЗроХрпНроХрпЗроЬрпН ро╡ро┤ро┐роорпБро▒рпИроХро│рпИрокрпН рокро┐ройрпНрокро▒рпНро▒ро╡рпБроорпН)
тАв **роорой роЕро┤рпБродрпНрод роорпЗро▓ро╛рогрпНроорпИ**: роЖро┤рпНроирпНрод роЪрпБро╡ро╛роЪроорпН роЕро▓рпНро▓родрпБ роорпЖройрпНроорпИропро╛рой роирпАроЯрпНроЪро┐ рокропро┐ро▒рпНроЪро┐ роЪрпЖропрпНропро╡рпБроорпН

**тЪая╕П роЙроЯройроЯро┐ рооро░рпБродрпНродрпБро╡ роХро╡ройроорпН родрпЗро╡рпИ:**
- родро┐роЯрпАро░рпН, роХроЯрпБроорпИропро╛рой родро▓рпИро╡ро▓ро┐
- роХро╛ропрпНроЪрпНроЪро▓рпН, роХро┤рпБродрпНродрпБ ро╡ро┐ро▒рпИрокрпНрокрпБ, роХрпБро┤рокрпНрокроорпН роЕро▓рпНро▓родрпБ рокро╛ро░рпНро╡рпИ рооро╛ро▒рпНро▒роЩрпНроХро│рпБроЯройрпН родро▓рпИро╡ро▓ро┐
- родро▓рпИропро┐ро▓рпН роХро╛ропродрпНродро┐ро▒рпНроХрпБрокрпН рокро┐ро▒роХрпБ родро▓рпИро╡ро▓ро┐
- роЪро┐роХро┐роЪрпНроЪрпИропро┐ройрпН рокрпЛродрпБроорпН роорпЛроЪрооро╛роХрпБроорпН родро▓рпИро╡ро▓ро┐

**родро▓рпИро╡ро▓ро┐ родрпКроЯро░рпНроирпНродро╛ро▓рпН роЕро▓рпНро▓родрпБ роорпЛроЪрооро╛ройро╛ро▓рпН роЪрпБроХро╛родро╛ро░ роиро┐рокрпБрогро░рпИ роЕрогрпБроХро╡рпБроорпН.**`;
      } else {
        helpfulResponse = i18n.language === 'en' 
          ? "I'm currently unable to connect to the AI service, but I'm here to help! For your health concern, I recommend consulting with a healthcare professional who can provide personalized advice. If this is urgent, please contact your doctor or call emergency services (108)."
          : "роиро╛ройрпН родро▒рпНрокрпЛродрпБ AI роЪрпЗро╡рпИропрпБроЯройрпН роЗрогрпИроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ, роЖройро╛ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН! роЙроЩрпНроХро│рпН роЪрпБроХро╛родро╛ро░ роХро╡ро▓рпИроХрпНроХрпБ, родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ роЖро▓рпЛроЪройрпИ ро╡ро┤роЩрпНроХроХрпНроХрпВроЯро┐роп роЪрпБроХро╛родро╛ро░ роиро┐рокрпБрогро░рпИ роЕрогрпБроХ рокро░ро┐роирпНродрпБро░рпИроХрпНроХро┐ро▒рпЗройрпН. роЗродрпБ роЕро╡роЪро░рооро╛ройро╛ро▓рпН, роЙроЩрпНроХро│рпН рооро░рпБродрпНродрпБро╡ро░рпИродрпН родрпКроЯро░рпНрокрпБроХрпКро│рпНро│ро╡рпБроорпН роЕро▓рпНро▓родрпБ роЕро╡роЪро░ роЪрпЗро╡рпИроХро│рпИ (108) роЕро┤рпИроХрпНроХро╡рпБроорпН.";
      }
      
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: helpfulResponse,
        createdAt: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
      };
      setMessages((prev) => [...prev, errorMessage]);
      
      toast({
        title: i18n.language === 'en' ? 'Connection Issue' : 'роЗрогрпИрокрпНрокрпБ роЪро┐роХрпНроХро▓рпН',
        description: i18n.language === 'en' ? 'AI service temporarily unavailable, but I provided helpful information.' : 'AI роЪрпЗро╡рпИ родро▒рпНроХро╛ро▓ро┐роХрооро╛роХ роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ, роЖройро╛ро▓рпН рокропройрпБро│рпНро│ родроХро╡ро▓рпНроХро│рпИ ро╡ро┤роЩрпНроХро┐ройрпЗройрпН.',
        variant: 'default',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    handleSendMessage(suggestion);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleClearConversation = () => {
    const welcomeMessage: Message = {
      id: "1",
      role: "assistant",
      content: getWelcomeMessage(),
      createdAt: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
    };
    setMessages([welcomeMessage]);
    setConversationHistory([]);
  };

  // Function to suggest nearby clinics based on symptoms
  const suggestNearbyClinics = async (symptoms: string): Promise<string> => {
    try {
      // Get symptom analysis
      const suggestions = clinicFinderService.suggestClinicsBySymptoms(symptoms, i18n.language as 'en' | 'ta');
      
      // Find nearby clinics
      const clinics = await clinicFinderService.findNearbyClinics({
        maxDistance: 5000, // 5km radius
        limit: 5,
        sortBy: 'distance'
      });

      let response = '';
      
      // Add urgency warning if needed
      if (suggestions.urgencyLevel === 'emergency') {
        response += i18n.language === 'en' 
          ? "ЁЯЪи **EMERGENCY**: This appears to be a medical emergency! Please call 108 or visit the nearest emergency room immediately.\n\n"
          : "ЁЯЪи **роЕро╡роЪро░роорпН**: роЗродрпБ рооро░рпБродрпНродрпБро╡ роЕро╡роЪро░ роиро┐ро▓рпИроорпИ рокрпЛро▓рпН родрпЖро░ро┐роХро┐ро▒родрпБ! роЙроЯройроЯро┐ропро╛роХ 108 роР роЕро┤рпИроХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роЕро░рпБроХро┐ро▓рпБро│рпНро│ роЕро╡роЪро░ роЪро┐роХро┐роЪрпНроЪрпИ рокро┐ро░ро┐ро╡рпБроХрпНроХрпБроЪрпН роЪрпЖро▓рпНро▓ро╡рпБроорпН.\n\n";
      } else if (suggestions.urgencyLevel === 'high') {
        response += i18n.language === 'en'
          ? "тЪая╕П **Important**: This requires prompt medical attention. Please seek care as soon as possible.\n\n"
          : "тЪая╕П **роорпБроХрпНроХро┐ропроорпН**: роЗродро▒рпНроХрпБ роЙроЯройроЯро┐ рооро░рпБродрпНродрпБро╡ роХро╡ройроорпН родрпЗро╡рпИ. роорпБроЯро┐роирпНродро╡ро░рпИ ро╡ро┐ро░рпИро╡ро┐ро▓рпН роЪро┐роХро┐роЪрпНроЪрпИ рокрпЖро▒ро╡рпБроорпН.\n\n";
      }

      // Add specialization recommendations
      if (suggestions.specializations.length > 0) {
        const specNames = suggestions.specializations.map(s => 
          i18n.language === 'ta' ? s.tamilName : s.name
        ).join(', ');
        
        response += i18n.language === 'en'
          ? `**Recommended Specialists**: ${specNames}\n\n`
          : `**рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ роиро┐рокрпБрогро░рпНроХро│рпН**: ${specNames}\n\n`;
      }

      // Add nearby clinics
      if (clinics.length > 0) {
        response += i18n.language === 'en' 
          ? "**ЁЯПе Nearby Healthcare Facilities:**\n\n"
          : "**ЁЯПе роЕро░рпБроХро┐ро▓рпБро│рпНро│ роЪрпБроХро╛родро╛ро░ ро╡роЪродро┐роХро│рпН:**\n\n";

        clinics.forEach((clinic, index) => {
          const distance = clinic.distance ? `${clinic.distance.toFixed(1)}km` : 'Unknown distance';
          const rating = 'тнР'.repeat(Math.floor(clinic.rating));
          const isOpen = clinicFinderService.isClinicOpen(clinic);
          const openStatus = isOpen 
            ? (i18n.language === 'en' ? 'ЁЯЯв Open' : 'ЁЯЯв родро┐ро▒роирпНродрпБро│рпНро│родрпБ')
            : (i18n.language === 'en' ? 'ЁЯФ┤ Closed' : 'ЁЯФ┤ роорпВроЯрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ');

          response += `**${index + 1}. ${clinic.name}**\n`;
          response += `ЁЯУН ${clinic.address}\n`;
          response += `ЁЯУП ${distance} тАв ${rating} (${clinic.rating}/5) тАв ${openStatus}\n`;
          
          if (clinic.phone) {
            response += `ЁЯУЮ ${clinic.phone}\n`;
          }
          
          if (clinic.specializations.length > 0) {
            const specs = clinic.specializations.slice(0, 3).join(', ');
            response += `ЁЯй║ ${specs}\n`;
          }
          
          if (clinic.emergencyServices) {
            response += i18n.language === 'en' ? 'ЁЯЪи Emergency Services Available\n' : 'ЁЯЪи роЕро╡роЪро░ роЪрпЗро╡рпИроХро│рпН роХро┐роЯрпИроХрпНроХро┐ройрпНро▒рой\n';
          }
          
          response += '\n';
        });

        // Add helpful tips
        response += i18n.language === 'en'
          ? "\n**ЁЯТб Tips:**\nтАв Call ahead to confirm availability\nтАв Bring your ID and any previous medical records\nтАв Consider the urgency of your condition when choosing\n"
          : "\n**ЁЯТб роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:**\nтАв роХро┐роЯрпИроХрпНроХрпБроорпН родройрпНроорпИропрпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНрод роорпБройрпНрокрпЗ роЕро┤рпИроХрпНроХро╡рпБроорпН\nтАв роЙроЩрпНроХро│рпН роЕроЯрпИропро╛ро│ роЕроЯрпНроЯрпИ рооро▒рпНро▒рпБроорпН роорпБроирпНродрпИроп рооро░рпБродрпНродрпБро╡ рокродро┐ро╡рпБроХро│рпИ роХрпКрогрпНроЯрпБ ро╡ро╛ро░рпБроЩрпНроХро│рпН\nтАв рооро░рпБродрпНродрпБро╡рооройрпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрпБроорпНрокрпЛродрпБ роЙроЩрпНроХро│рпН роиро┐ро▓рпИропро┐ройрпН роЕро╡роЪро░родрпНродрпИ роХро░рпБродрпНродро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН\n";

      } else {
        response += i18n.language === 'en'
          ? "I couldn't find nearby clinics at the moment. This might be due to:\nтАв Location services not enabled\nтАв No healthcare facilities in the immediate area\nтАв Temporary service issues\n\nPlease try enabling location access or search for clinics manually."
          : "родро▒рпНрокрпЛродрпБ роЕро░рпБроХро┐ро▓рпБро│рпНро│ роХро┐ро│ро┐ройро┐роХрпНроХрпБроХро│рпИ роОройрпНройро╛ро▓рпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роЗродрпБ роЗродройрпН роХро╛ро░рогрооро╛роХ роЗро░рпБроХрпНроХро▓ро╛роорпН:\nтАв роЗро░рпБрокрпНрокро┐роЯ роЪрпЗро╡рпИроХро│рпН роЗропроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ\nтАв роЙроЯройроЯро┐ рокроХрпБродро┐ропро┐ро▓рпН роЪрпБроХро╛родро╛ро░ ро╡роЪродро┐роХро│рпН роЗро▓рпНро▓рпИ\nтАв родро▒рпНроХро╛ро▓ро┐роХ роЪрпЗро╡рпИ роЪро┐роХрпНроХро▓рпНроХро│рпН\n\nродропро╡рпБроЪрпЖропрпНродрпБ роЗро░рпБрокрпНрокро┐роЯ роЕрогрпБроХро▓рпИ роЗропроХрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роХро┐ро│ро┐ройро┐роХрпНроХрпБроХро│рпИ роХрпИроорпБро▒рпИропро╛роХ родрпЗроЯро╡рпБроорпН.";
      }

      return response;

    } catch (error) {
      console.error('Error finding clinics:', error);
      return i18n.language === 'en'
        ? "I'm having trouble finding nearby clinics right now. Please try again later or contact your local healthcare provider directly. In case of emergency, call 108."
        : "родро▒рпНрокрпЛродрпБ роЕро░рпБроХро┐ро▓рпБро│рпНро│ роХро┐ро│ро┐ройро┐роХрпНроХрпБроХро│рпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐рокрпНрокродро┐ро▓рпН роОройроХрпНроХрпБ роЪро┐роХрпНроХро▓рпН роЙро│рпНро│родрпБ. рокро┐ройрпНройро░рпН роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роЙроЩрпНроХро│рпН роЙро│рпНро│рпВро░рпН роЪрпБроХро╛родро╛ро░ ро╡ро┤роЩрпНроХрпБроиро░рпИ роирпЗро░роЯро┐ропро╛роХ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН. роЕро╡роЪро░ роиро┐ро▓рпИропро┐ро▓рпН, 108 роР роЕро┤рпИроХрпНроХро╡рпБроорпН.";
    }
  };



  return (
    <div className="fixed inset-0 top-16 flex bg-white dark:bg-gray-900 transition-colors">
      {/* Left Sidebar - ChatGPT Style */}
      <div className="w-64 bg-gray-900 dark:bg-gray-950 text-white flex flex-col border-r border-gray-700">
        {/* Sidebar Header */}
        <div className="p-3 border-b border-gray-700">
          <Button 
            onClick={handleClearConversation}
            className="w-full bg-transparent border border-gray-600 hover:bg-gray-800 text-white justify-start rounded-md h-11"
          >
            <Plus className="w-4 h-4 mr-2" />
            {i18n.language === 'en' ? 'New chat' : 'рокрпБродро┐роп роЙро░рпИропро╛роЯро▓рпН'}
          </Button>
        </div>

        {/* Chat History */}
        <div className="flex-1 overflow-y-auto p-2">
          <div className="space-y-1">
            {[
              { en: 'Find nearby clinics', ta: 'роЕро░рпБроХро┐ро▓рпБро│рпНро│ роХро┐ро│ро┐ройро┐роХрпНроХрпБроХро│рпН' },
              { en: 'Headache remedies', ta: 'родро▓рпИро╡ро▓ро┐ родрпАро░рпНро╡рпБроХро│рпН' },
              { en: 'Travel health advice', ta: 'рокропрог роЪрпБроХро╛родро╛ро░ роЖро▓рпЛроЪройрпИ' },
              { en: 'Emergency services', ta: 'роЕро╡роЪро░ роЪрпЗро╡рпИроХро│рпН' },
              { en: 'Fever management', ta: 'роХро╛ропрпНроЪрпНроЪро▓рпН роорпЗро▓ро╛рогрпНроорпИ' },
            ].map((item, index) => (
              <div 
                key={index}
                className="p-3 rounded-lg hover:bg-gray-800 cursor-pointer text-sm text-gray-300 truncate transition-colors"
                onClick={() => handleSuggestionClick(i18n.language === 'en' ? item.en : item.ta)}
              >
                <MessageCircle className="w-4 h-4 inline mr-2" />
                {i18n.language === 'en' ? item.en : item.ta}
              </div>
            ))}
          </div>
        </div>

        {/* Sidebar Footer */}
        <div className="p-3 border-t border-gray-700 space-y-2">
          <Button
            onClick={() => navigate('/')}
            className="w-full bg-transparent hover:bg-gray-800 text-white justify-start rounded-md"
          >
            <Home className="w-4 h-4 mr-2" />
            {i18n.language === 'en' ? 'Dashboard' : 'роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ'}
          </Button>
          <Button
            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
            className="w-full bg-transparent hover:bg-gray-800 text-white justify-start rounded-md"
          >
            {theme === 'dark' ? <Sun className="w-4 h-4 mr-2" /> : <Moon className="w-4 h-4 mr-2" />}
            {theme === 'dark' ? 'Light mode' : 'Dark mode'}
          </Button>
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Chat Messages */}
        <div className="flex-1 overflow-y-auto">
          {messages.length === 1 && (
            /* Welcome Screen */
            <div className="h-full flex items-center justify-center p-6">
              <div className="text-center max-w-2xl">
                <div className="w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-6">
                  <Bot className="w-6 h-6 text-green-600 dark:text-green-400" />
                </div>
                <h1 className="text-2xl font-semibold text-gray-900 dark:text-white mb-4">
                  {i18n.language === 'en' ? 'How can I help you today?' : 'роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?'}
                </h1>
                
                {/* Suggestion Cards */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-w-2xl mx-auto">
                  {[
                    { 
                      en: "I have a headache, what should I do?", 
                      ta: "роОройроХрпНроХрпБ родро▓рпИро╡ро▓ро┐ роЗро░рпБроХрпНроХро┐ро▒родрпБ, роиро╛ройрпН роОройрпНрой роЪрпЖропрпНроп ро╡рпЗрогрпНроЯрпБроорпН?",
                      icon: "ЁЯдХ"
                    },
                    { 
                      en: "What are the symptoms of flu?", 
                      ta: "роХро╛ропрпНроЪрпНроЪро▓ро┐ройрпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпН роОройрпНрой?",
                      icon: "ЁЯдТ"
                    },
                    { 
                      en: "Travel health tips for Japan", 
                      ta: "роЬрокрпНрокро╛ройрпБроХрпНроХро╛рой рокропрог роЪрпБроХро╛родро╛ро░ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН",
                      icon: "тЬИя╕П"
                    },
                    { 
                      en: "Find nearby clinics and hospitals", 
                      ta: "роЕро░рпБроХро┐ро▓рпБро│рпНро│ роХро┐ро│ро┐ройро┐роХрпНроХрпБроХро│рпН рооро▒рпНро▒рпБроорпН рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН",
                      icon: "ЁЯПе"
                    }
                  ].map((suggestion, index) => (
                    <motion.button
                      key={index}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => handleSuggestionClick(i18n.language === 'en' ? suggestion.en : suggestion.ta)}
                      className="p-4 border border-gray-200 dark:border-gray-700 rounded-xl hover:border-gray-300 dark:hover:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-left transition-all duration-200 bg-white dark:bg-gray-800"
                    >
                      <div className="text-2xl mb-2">{suggestion.icon}</div>
                      <div className="text-sm text-gray-700 dark:text-gray-300">
                        {i18n.language === 'en' ? suggestion.en : suggestion.ta}
                      </div>
                    </motion.button>
                  ))}
                </div>
              </div>
            </div>
          )}

          {messages.length > 1 && (
            <div className="pb-32">
              <AnimatePresence>
                {messages.slice(1).map((message) => (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.4, ease: "easeOut" }}
                    className={`w-full ${
                      message.role === "user" 
                        ? "bg-white dark:bg-gray-900" 
                        : "bg-gray-50 dark:bg-gray-800/50"
                    } border-b border-gray-100 dark:border-gray-800`}
                  >
                    <div className="max-w-3xl mx-auto px-6 py-8">
                      <div className="flex gap-6">
                        {/* Avatar */}
                        <div className="flex-shrink-0">
                          {message.role === "user" ? (
                            <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                              <User className="w-4 h-4 text-white" />
                            </div>
                          ) : (
                            <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
                              <Bot className="w-4 h-4 text-white" />
                            </div>
                          )}
                        </div>
                        
                        {/* Message Content */}
                        <div className="flex-1 min-w-0">
                          {message.role === "assistant" ? (
                            <div className="prose prose-gray dark:prose-invert max-w-none">
                              <ReactMarkdown
                                components={{
                                  p: ({ children }) => (
                                    <p className="text-gray-900 dark:text-gray-100 leading-7 mb-4 last:mb-0">
                                      {children}
                                    </p>
                                  ),
                                  ul: ({ children }) => (
                                    <ul className="text-gray-900 dark:text-gray-100 list-disc pl-6 mb-4">
                                      {children}
                                    </ul>
                                  ),
                                  ol: ({ children }) => (
                                    <ol className="text-gray-900 dark:text-gray-100 list-decimal pl-6 mb-4">
                                      {children}
                                    </ol>
                                  ),
                                  li: ({ children }) => (
                                    <li className="mb-1">{children}</li>
                                  ),
                                  strong: ({ children }) => (
                                    <strong className="font-semibold text-gray-900 dark:text-white">
                                      {children}
                                    </strong>
                                  ),
                                  code: ({ children }) => (
                                    <code className="bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-sm font-mono">
                                      {children}
                                    </code>
                                  ),
                                }}
                              >
                                {message.content}
                              </ReactMarkdown>
                            </div>
                          ) : (
                            <p className="text-gray-900 dark:text-gray-100 leading-7">
                              {message.content}
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </AnimatePresence>
              
              {isLoading && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="w-full bg-gray-50 dark:bg-gray-800/50 border-b border-gray-100 dark:border-gray-800"
                >
                  <div className="max-w-3xl mx-auto px-6 py-8">
                    <div className="flex gap-6">
                      <div className="flex-shrink-0">
                        <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
                          <Bot className="w-4 h-4 text-white" />
                        </div>
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-1">
                          <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: "0ms" }} />
                          <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: "150ms" }} />
                          <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: "300ms" }} />
                        </div>
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
          )}
        </div>

        {/* Input Area - Fixed at bottom */}
        <div className="flex-shrink-0 bg-gradient-to-t from-white dark:from-gray-900 via-white dark:via-gray-900 to-transparent pt-6">
          <div className="max-w-3xl mx-auto px-6 pb-6">
            <div className="relative bg-white dark:bg-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyDown={handleKeyPress}
                placeholder={i18n.language === 'en' ? "Message MedGuide..." : "роорпЖроЯрпНроХрпИроЯрпБроХрпНроХрпБ роЪрпЖропрпНродро┐ роЕройрпБрокрпНрокрпБроЩрпНроХро│рпН..."}
                className="w-full pr-20 py-4 px-4 border-0 bg-transparent focus:ring-0 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 resize-none"
                disabled={isLoading}
              />
              <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex gap-1">
                <Button
                  onClick={() => handleSendMessage(i18n.language === 'en' ? "Find nearby clinics and hospitals" : "роЕро░рпБроХро┐ро▓рпБро│рпНро│ роХро┐ро│ро┐ройро┐роХрпНроХрпБроХро│рпН рооро▒рпНро▒рпБроорпН рооро░рпБродрпНродрпБро╡рооройрпИроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН")}
                  disabled={isLoading}
                  className="w-8 h-8 p-0 bg-green-600 hover:bg-green-700 rounded-lg transition-colors"
                  title={i18n.language === 'en' ? "Find nearby clinics" : "роЕро░рпБроХро┐ро▓рпБро│рпНро│ роХро┐ро│ро┐ройро┐роХрпНроХрпБроХро│рпН"}
                >
                  <MapPin className="h-4 w-4 text-white" />
                </Button>
                <Button
                  onClick={() => handleSendMessage()}
                  disabled={!inputMessage.trim() || isLoading}
                  className="w-8 h-8 p-0 bg-gray-900 dark:bg-white hover:bg-gray-800 dark:hover:bg-gray-100 rounded-lg transition-colors"
                >
                  {isLoading ? (
                    <Loader2 className="h-4 w-4 animate-spin text-white dark:text-gray-900" />
                  ) : (
                    <Send className="h-4 w-4 text-white dark:text-gray-900" />
                  )}
                </Button>
              </div>
            </div>
            
            {/* Disclaimer */}
            <p className="text-xs text-gray-500 dark:text-gray-400 text-center mt-3">
              {i18n.language === 'en' 
                ? 'MedGuide can make mistakes. Consider checking important information and consult healthcare professionals for medical decisions.'
                : 'роорпЖроЯрпНроХрпИроЯрпН родро╡ро▒рпБроХро│рпН роЪрпЖропрпНропро▓ро╛роорпН. роорпБроХрпНроХро┐ропрооро╛рой родроХро╡ро▓рпНроХро│рпИ роЪро░ро┐рокро╛ро░рпНродрпНродрпБ рооро░рпБродрпНродрпБро╡ роорпБроЯро┐ро╡рпБроХро│рпБроХрпНроХрпБ роЪрпБроХро╛родро╛ро░ роиро┐рокрпБрогро░рпНроХро│рпИ роЕрогрпБроХро╡рпБроорпН.'
              }
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chat;